<!DOCTYPE html>
<html lang="vi">

<head>
  <meta charset="UTF-8" />
  <title>MenStyle - Đơn hàng</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet" />
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #f8f9fa;
      margin: 0;
      padding: 0;
      display: flex;
    }
    .filter-btn.active {
    background-color: #0d6efd !important; /* xanh */
    color: white !important;
    border: none;
  }

  .filter-btn:focus {
    outline: none;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.4);
  }

    .sidebar {
      width: 240px;
      min-height: 100vh;
      background: #fff;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
      padding: 20px 0;
      transition: all 0.3s ease;
    }

    .sidebar.collapsed {
      width: 60px;
    }

    .sidebar a {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px 20px;
      color: #333;
      text-decoration: none;
      font-weight: 500;
      transition: 0.3s;
      white-space: nowrap;
    }

    .sidebar a:hover {
      background: #111;
      color: #fff;
    }

    .sidebar.collapsed a span {
      display: none;
    }

    .sidebar a i {
      font-size: 20px;
    }
    .sidebar a.active {
  background-color: #000 !important; /* nền đen */
  color: #fff !important;            /* chữ trắng */
}
.sidebar a.active i {
  color: #fff !important;            /* icon trắng */
}


    .content {
      flex: 1;
      padding: 30px;
      transition: margin-left 0.3s ease;
    }

    header {
      background-color: #111;
      color: #fff;
      padding: 15px 20px;
      font-size: 24px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 15px;
      margin-bottom: 30px;
    }

    .table th {
      background-color: #343a40;
      color: white;
      font-weight: 600;
      text-align: center;
    }

    .table td {
      vertical-align: middle;
    }

    .badge-status {
      font-size: 0.85rem;
      padding: 5px 10px;
      border-radius: 0.5rem;
    }

    .badge-Pending {
      background-color: #ffc107;
      color: #212529;
    }

    .badge-Completed {
      background-color: #198754;
      color: white;
    }

    .badge-Cancelled {
      background-color: #dc3545;
      color: white;
    }

    .card {
      border-radius: 10px;
    }

    .card-title {
      font-size: 1rem;
      color: #6c757d;
    }

    .card h3 {
      font-weight: bold;
      margin: 0;
      color: #111;
    }
  </style>
</head>

<body>
  <!-- Sidebar -->
  <nav class="sidebar" id="sidebar">
    <a href="/"><i class="bi bi-house"></i><span>Trang chủ</span></a>
    <a href="/order/by-date"><i class="bi bi-bell"></i><span>Thông báo</span></a>
    <a href="/products/view"><i class="bi bi-box"></i><span> Sản phẩm</span></a>
    <a href="/products/product-types/view"><i class="bi bi-tags"></i><span> Thể loại</span></a>
    <a href="/voucher/view"><i class="bi bi-ticket"></i><span> Phiếu giảm giá</span></a>
    <a href="/accounts/view"><i class="bi bi-people"></i><span> Tài khoản</span></a>
    <a href="/accounts/admin/orders" class="active"><i class="bi bi-receipt-cutoff"></i><span> Đơn hàng</span></a>
    <a href="/dashboard/stats-overview"><i class="bi bi-bar-chart-line"></i><span> Thống kê</span></a>
    <a href="/setting/view"><i class="bi bi-gear"></i> <span>Cài đặt</span></a>
  </nav>

  <!-- Content -->
  <div class="content" id="content">
    <header>
      <button id="toggleBtn" class="btn btn-dark"><i class="bi bi-list"></i></button>
      Danh sách đơn hàng
    </header>

    <main>
      <!-- Thống kê đơn hàng -->
      <div class="row mb-4">
        <div class="col-md-3">
          <div class="card text-center shadow-sm border-0">
            <div class="card-body">
              <h5 class="card-title">Tổng đơn hàng</h5>
              <h3>
                <%= orders.length %>
              </h3>
            </div>
          </div>
        </div>

        <div class="col-md-3">
          <div class="card text-center shadow-sm border-0">
            <div class="card-body">
              <h5 class="card-title">Chờ xử lý</h5>
              <h3>
                <%= orders.filter(o=> o.order_status === 'pending').length %>
              </h3>
            </div>
          </div>
        </div>


        <div class="col-md-3">
          <div class="card text-center shadow-sm border-0">
            <div class="card-body">
              <h5 class="card-title">Đang xử lý</h5>
              <h3>
                <% const tong=orders.length; const choXuLy=orders.filter(o=> o.order_status === 'pending').length;
                  const hoanThanh = orders.filter(o => o.order_status === 'delivered' && o.payment_status ===
                  'paid').length;
                  const dangXuLy = tong - choXuLy - hoanThanh;
                  %>
                  <%= dangXuLy %>
              </h3>
            </div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card text-center shadow-sm border-0">
            <div class="card-body">
              <h5 class="card-title">Đã hoàn thành</h5>
              <h3>
                <%= orders.filter(o=> o.order_status === 'delivered' && o.payment_status === 'paid').length %>
              </h3>
            </div>
          </div>
        </div>
      </div>
      <div class="mb-3 row g-2 text-center">
        <div class="col">
          <button class="btn btn-dark w-100 py-2 fs-6 filter-btn" onclick="filterOrders('all', this)">Tất cả</button>
        </div>
        <div class="col">
          <button class="btn btn-dark w-100 py-2 fs-6 filter-btn" onclick="filterOrders('pending', this)">Chờ xử lý</button>
        </div>
        <div class="col">
          <button class="btn btn-dark w-100 py-2 fs-6 filter-btn" onclick="filterOrders('confirmed', this)">Đã xác nhận</button>
        </div>
        <div class="col">
          <button class="btn btn-dark w-100 py-2 fs-6 filter-btn" onclick="filterOrders('shipping', this)">Đang giao</button>
        </div>
        <div class="col">
          <button class="btn btn-dark w-100 py-2 fs-6 filter-btn" onclick="filterOrders('delivered', this)">Đã giao</button>
        </div>
        <div class="col">
          <button class="btn btn-dark w-100 py-2 fs-6 filter-btn" onclick="filterOrders('cancelled', this)">Đã hủy</button>
        </div>
      </div>
      
      <!-- Thanh tìm kiếm theo mã đơn hàng -->
      <div class="row mb-3">
        <div class="col-12">
          <input type="text" id="searchOrderInput" class="form-control" placeholder="Tìm theo mã đơn hàng..." onkeyup="searchOrders()">
        </div>
      </div>
      <div class="table-responsive">
        <table class="table table-bordered table-hover text-center align-middle">
          <thead>
            <tr>
              <th>Mã đơn hàng</th>
              <th>Khách hàng</th>
              <th>Địa chỉ giao hàng</th>
              <th>Thanh toán</th>
              <th>Tổng tiền</th>
              <th>Trạng thái tt</th>
              <th>Trạng thái đơn </th>
              <th>Ngày tạo</th>
            </tr>
          </thead>
          <tbody>
            <% orders.forEach((order, index)=> { %>
              <tr>
                <td>
                  <%= order.code %>
                </td>
                <td class="text-start">
                  <a href="/order/order_detail/<%= order._id %>" class="text-decoration-none text-dark fw-bold">
                    <strong>
                      <%= order.user_id.name %>
                    </strong><br>
                  </a>
                  <small>
                    <%= order.user_id.email %>
                  </small>
                </td>
                <td class="text-start">
                  <% if (order.shipping_address_id) { %>
                    <%= order.shipping_address_id.recipient_name %><br>
                      <small>
                        <%= order.shipping_address_id.address_line %>,
                          <%= order.shipping_address_id.ward %>,
                            <%= order.shipping_address_id.district %>,
                              <%= order.shipping_address_id.province %>
                      </small>
                      <% } else { %>
                        <em>Không có địa chỉ</em>
                        <% } %>
                </td>

                <% if (order.payment_method_id) { %>
                  <td>
                    <%= order.payment_method_id.code %>
                  </td>
                  <% } else { %>
                    <td>Không xác định</td>
                    <% } %>

                      <td>
                        <%= order.total_amount.toLocaleString('vi-VN') %> ₫
                      </td>
                      <td>
                        <% if (order.payment_method_id.code === "COD") { %>
                          <!-- COD: admin có thể chỉnh -->
                          <select onchange="updatePaymentStatus('<%= order._id %>', this.value)">
                            <option value="unpaid" 
                              <%= order.payment_status === 'unpaid' ? 'selected' : '' %> 
                              <%= (order.payment_status === 'paid' || order.payment_status === 'refunded') ? 'disabled' : '' %>>
                              Chưa thanh toán
                            </option>
                            
                            <option value="paid" <%= order.payment_status === 'paid' ? 'selected' : '' %>>
                              Đã thanh toán
                            </option>
                            
                            <option value="refunded" <%= order.payment_status === 'refunded' ? 'selected' : '' %>>
                              Hoàn tiền
                            </option>
                          </select>
                          
                        <% } else if (order.payment_method_id.code === "ZALOPAY") { %>
                          <% 
                            // Tìm bản ghi thanh toán liên quan đến đơn hàng
                            const payment = payments.find(p => p.order_id.toString() === order._id.toString());
                            const hasTransactionId = payment && payment.transaction_id && payment.payment_status === 'success';
                          %>
                          <% if (hasTransactionId) { %>
                            <!-- ZaloPay có transaction_id và payment_status là success => Đã thanh toán, chỉ cho chọn Hoàn tiền -->
                            <select onchange="updatePaymentStatus('<%= order._id %>', this.value)">
                              <option value="paid" selected>Đã thanh toán</option>
                              <option value="refunded" <%= order.payment_status === 'refunded' ? 'selected' : '' %>>Hoàn tiền</option>
                            </select>
                          <% } else { %>
                            <!-- ZaloPay chưa có transaction_id hoặc payment_status không phải success => Chưa thanh toán, không chỉnh sửa -->
                            <select disabled>
                              <option value="unpaid" selected>Chưa thanh toán</option>
                            </select>
                          <% } %>
                        <% } %>
                      </td>
                      
                      <td>
                        <select onchange="updateStatus('<%= order._id %>', this.value)"
                                <%= (order.order_status === 'cancelled' || order.order_status === 'delivered') ? 'disabled' : '' %>>
                            
                            <option value="pending" <%= order.order_status==='pending' ? 'selected' : '' %> 
                                <%= order.order_status!=='pending' ? 'disabled' : '' %>>
                                Chờ xử lý
                            </option>
                      
                            <option value="confirmed" <%= order.order_status==='confirmed' ? 'selected' : '' %> 
                                <%= !['pending','confirmed'].includes(order.order_status) ? 'disabled' : '' %>>
                                Đã xác nhận
                            </option>
                      
                            <option value="shipping" <%= order.order_status==='shipping' ? 'selected' : '' %> 
                                <%= !['confirmed','shipping'].includes(order.order_status) ? 'disabled' : '' %>>
                                Đang giao hàng
                            </option>
                      
                            <option value="delivered" <%= order.order_status==='delivered' ? 'selected' : '' %> 
                                <%= order.order_status!=='shipping' && order.order_status!=='delivered' ? 'disabled' : '' %>>
                                Đã giao
                            </option>
                      
                            <option value="cancelled" <%= order.order_status==='cancelled' ? 'selected' : '' %> 
                                <%= order.order_status!=='pending' ? 'disabled' : '' %>>
                                Đã hủy
                            </option>
                        </select>
                      </td>
                      
                      
                    
                      <td>
                        <%= new Date(order.createdAt).toLocaleDateString('vi-VN') %>
                      </td>
              </tr>
              <% }) %>
          </tbody>
        </table>
        <nav>
          <ul class="pagination justify-content-center" id="pagination"></ul>
        </nav>
      </div>
    </main>
  </div>

  <script>
    const toggleBtn = document.getElementById('toggleBtn');
    const sidebar = document.getElementById('sidebar');

    toggleBtn.addEventListener('click', () => {
      sidebar.classList.toggle('collapsed');
    });

    async function updateStatus(orderId, order_status) {
      try {
        console.log('Updating status for order:', orderId, 'to:', order_status);
        const response = await fetch(`/order/update-status/${orderId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ order_status }),
        });
        const data = await response.json();
        if (response.ok) {
          alert('Cập nhật trạng thái thành công!');
          location.reload();
        } else {
          alert('Lỗi: ' + data.message);
        }
      } catch (error) {
        console.error('Lỗi khi cập nhật trạng thái:', error);
        alert('Lỗi khi cập nhật trạng thái: ' + error.message);
      }
    }
    async function updatePaymentStatus(orderId, payment_status) {
      try {
        console.log('Updating payment status for order:', orderId, 'to:', payment_status);
        const response = await fetch(`/order/update-payment-status/${orderId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ payment_status }),
        });
        const data = await response.json();
        if (response.ok) {
          alert('Cập nhật trạng thái thanh toán thành công!');
          location.reload();
        } else {
          alert('Lỗi: ' + data.message);
        }
      } catch (error) {
        console.error('Lỗi khi cập nhật trạng thái thanh toán:', error);
        alert('Lỗi khi cập nhật: ' + error.message);
      }
    }
    function filterOrders(status) {
      const rows = document.querySelectorAll("tbody tr");
      rows.forEach(row => {
        const orderStatus = row.querySelector("select[onchange^='updateStatus']").value;
        if (status === 'all' || orderStatus === status) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }
    // ========= PHÂN TRANG =========
    const rowsPerPage = 15;
    let currentPage = 1;

    function renderTable() {
      const rows = document.querySelectorAll("tbody tr");
      const totalPages = Math.ceil(rows.length / rowsPerPage);

      // Ẩn tất cả
      rows.forEach(row => row.style.display = "none");

      // Hiện các dòng trong trang hiện tại
      const start = (currentPage - 1) * rowsPerPage;
      const end = start + rowsPerPage;
      rows.forEach((row, index) => {
        if (index >= start && index < end) {
          row.style.display = "";
        }
      });

      renderPagination(totalPages);
    }

    function renderPagination(totalPages) {
      const pagination = document.getElementById("pagination");
      pagination.innerHTML = "";

      // Nút Previous
      const prevLi = document.createElement("li");
      prevLi.className = `page-item ${currentPage === 1 ? "disabled" : ""}`;
      prevLi.innerHTML = `<a class="page-link" href="#">«</a>`;
      prevLi.addEventListener("click", e => {
        e.preventDefault();
        if (currentPage > 1) {
          currentPage--;
          renderTable();
        }
      });
      pagination.appendChild(prevLi);

      // Các nút số
      for (let i = 1; i <= totalPages; i++) {
        const li = document.createElement("li");
        li.className = `page-item ${i === currentPage ? "active" : ""}`;
        li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
        li.addEventListener("click", e => {
          e.preventDefault();
          currentPage = i;
          renderTable();
        });
        pagination.appendChild(li);
      }

      // Nút Next
      const nextLi = document.createElement("li");
      nextLi.className = `page-item ${currentPage === totalPages ? "disabled" : ""}`;
      nextLi.innerHTML = `<a class="page-link" href="#">»</a>`;
      nextLi.addEventListener("click", e => {
        e.preventDefault();
        if (currentPage < totalPages) {
          currentPage++;
          renderTable();
        }
      });
      pagination.appendChild(nextLi);
    }

    // Gọi khi load
    renderTable();

    // Khi lọc trạng thái thì reset về trang 1
    function filterOrders(status) {
      const rows = document.querySelectorAll("tbody tr");
      rows.forEach(row => {
        const orderStatus = row.querySelector("select[onchange^='updateStatus']").value;
        if (status === 'all' || orderStatus === status) {
          row.style.display = '';
          row.dataset.show = "true";
        } else {
          row.style.display = 'none';
          row.dataset.show = "false";
        }
      });

      // Cập nhật lại phân trang chỉ với các dòng đang show
      const visibleRows = Array.from(rows).filter(row => row.dataset.show === "true");
      const totalPages = Math.ceil(visibleRows.length / rowsPerPage);
      currentPage = 1;

      // Hiện các dòng của trang đầu tiên
      visibleRows.forEach((row, index) => {
        if (index < rowsPerPage) {
          row.style.display = "";
        } else {
          row.style.display = "none";
        }
      });

      renderPagination(totalPages);
    }
    function searchOrders() {
    const input = document.getElementById("searchOrderInput").value.toLowerCase();
    const rows = document.querySelectorAll("tbody tr");

    rows.forEach(row => {
      const code = row.querySelector("td").textContent.toLowerCase();
      if (code.includes(input)) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    });
  }

  </script>
</body>

</html>