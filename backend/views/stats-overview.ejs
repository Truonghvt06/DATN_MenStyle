<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <title>Th·ªëng k√™ - MenStyle</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family:'Segoe UI',sans-serif; background:#f8f9fa; margin:0; padding:0; display:flex; }
    .sidebar { width:240px; min-height:100vh; background:#fff; box-shadow:0 2px 6px rgba(0,0,0,.05); padding:20px 0; transition:.3s; }
    .sidebar.collapsed{ width:60px; }
    .sidebar a{ display:flex; align-items:center; gap:10px; padding:10px 20px; color:#333; text-decoration:none; font-weight:500; white-space:nowrap; transition:.2s; }
    .sidebar a:hover{ background:#111; color:#fff; }
    .sidebar.collapsed a span{ display:none; }
    .sidebar a i{ font-size:20px; }
    .content{ flex:1; padding:30px; }
    header{ background:#111; color:#fff; padding:15px 20px; font-size:24px; font-weight:600; display:flex; align-items:center; gap:15px; margin-bottom:22px; }
    .value{ font-size:28px; font-weight:700; }
    .small-label{ font-size:14px; color:#666; }
    .box-card, .chart-card{ padding:20px; border-radius:12px; background:#fff; box-shadow:0 2px 6px rgba(0,0,0,.05); }
    table th, table td{ vertical-align:middle!important; }
    .chart-wrap{ position:relative; height:260px; }
    .chart-wrap--yearly{ position:relative; height:320px; }
    .chart-wrap>canvas, .chart-wrap--yearly>canvas{ width:100%!important; height:100%!important; display:block!important; }
    /* Thanh filter */
    .filter-bar{ gap:8px; }
    .filter-card{ padding:14px; border-radius:12px; background:#fff; box-shadow:0 2px 6px rgba(0,0,0,.05); }
    .btn-apply{ min-width:110px; }
    .muted{ color:#6c757d; }
    .sidebar a.active {
      background-color: #000 !important; /* n·ªÅn ƒëen */
      color: #fff !important;            /* ch·ªØ tr·∫Øng */
    }
    .sidebar a.active i {
      color: #fff !important;            /* icon tr·∫Øng */
    }
  </style>
</head>

<script>
  // server c√≥ th·ªÉ truy·ªÅn m·∫∑c ƒë·ªãnh (ISO) ‚Äì kh√¥ng b·∫Øt bu·ªôc
  const defaultFrom = "<%= defaultFrom %>";
  const defaultTo   = "<%= defaultTo %>";
</script>

<body>
  <!-- Sidebar -->
  <nav class="sidebar" id="sidebar">
    <a href="/"><i class="bi bi-house"></i><span>Trang ch·ªß</span></a>
    <a href="/order/by-date"><i class="bi bi-bell"></i><span>Th√¥ng b√°o</span></a>
    <a href="/products/view"><i class="bi bi-box"></i><span>S·∫£n ph·∫©m</span></a>
    <a href="/products/product-types/view"><i class="bi bi-tags"></i><span>Th·ªÉ lo·∫°i</span></a>
    <a href="/voucher/view"><i class="bi bi-ticket"></i><span>Phi·∫øu gi·∫£m gi√°</span></a>
    <a href="/accounts/view"><i class="bi bi-people"></i><span>T√†i kho·∫£n</span></a>
    <a href="/accounts/admin/orders"><i class="bi bi-receipt-cutoff"></i><span>ƒê∆°n h√†ng</span></a>
    <a href="/dashboard/stats-overview" class="active">
      <i class="bi bi-bar-chart-line"></i><span>Th·ªëng k√™</span>
    </a>
    <a href="/setting/view"><i class="bi bi-gear"></i><span>C√†i ƒë·∫∑t</span></a>
  </nav>

  <!-- Content -->
  <div class="content" id="content">
    <header>
      <button id="toggleBtn" class="btn btn-dark"><i class="bi bi-list"></i></button>
      MenStyle - Th·ªëng k√™
    </header>

    <!-- FILTER: preset + kho·∫£ng ng√†y -->
    <div class="filter-card mb-3">
      <div class="row g-2 align-items-end filter-bar">
        <div class="col-12 col-md-3">
          <label class="form-label mb-1">Ch·ªçn nhanh</label>
          <select id="time-range" class="form-select">
            <option value="today">H√¥m nay</option>
            <option value="yesterday">H√¥m qua</option>
            <option value="7">1 tu·∫ßn qua</option>
            <option value="14">2 tu·∫ßn qua</option>
            <option value="30">1 th√°ng qua</option>
            <option value="60">2 th√°ng qua</option>
            <option value="180">6 th√°ng qua</option>
            <option value="365">1 nƒÉm qua</option>
          </select>
        </div>

        <div class="col-6 col-md-3">
          <label class="form-label mb-1">T·ª´ ng√†y</label>
          <input type="date" id="fromDate" class="form-control">
        </div>

        <div class="col-6 col-md-3">
          <label class="form-label mb-1">ƒê·∫øn ng√†y</label>
          <input type="date" id="toDate" class="form-control">
        </div>

        <div class="col-12 col-md-3 d-grid d-md-block">
          <button id="applyBtn" class="btn btn-primary btn-apply"><i class="bi bi-funnel me-1"></i>√Åp d·ª•ng</button>
          <button id="resetBtn" class="btn btn-outline-secondary ms-md-2 mt-2 mt-md-0"><i class="bi bi-arrow-repeat me-1"></i>Reset</button>
        </div>
      </div>
      <div class="mt-2 muted" id="dateRangeLabel">Ch·ªçn kho·∫£ng th·ªùi gian ƒë·ªÉ xem th·ªëng k√™</div>
    </div>

    <!-- 3 KPI -->
    <div class="row g-4 mb-4">
      <div class="col-md-4">
        <div class="box-card">
          <div class="small-label">Doanh Thu</div>
          <div class="value text-success" id="revenue">‚Ç´0</div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="box-card">
          <div class="small-label">ƒê∆°n H√†ng</div>
          <div class="value" id="order-count">0</div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="box-card">
          <div class="small-label">Kh√°ch H√†ng M·ªõi</div>
          <div class="value" id="new-users-count">0</div>
        </div>
      </div>
    </div>

    <!-- Best sellers -->
    <div class="row g-4 mb-4">
      <div class="col-12">
        <div class="chart-card">
          <h5 class="mb-3">üî• S·∫£n Ph·∫©m B√°n Ch·∫°y</h5>
          <table class="table table-bordered" id="best-sellers">
            <thead><tr><th>#</th><th>S·∫£n Ph·∫©m</th><th>Doanh Thu</th></tr></thead>
            <tbody><tr><td colspan="3" class="text-center">Loading...</td></tr></tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- 2 bi·ªÉu ƒë·ªì ng√†y -->
    <div class="row g-4">
      <div class="col-md-6">
        <div class="chart-card">
          <h5 class="mb-3">üìà Bi·ªÉu ƒë·ªì Doanh thu</h5>
          <div class="chart-wrap"><canvas id="revenueChart"></canvas></div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="chart-card">
          <h5 class="mb-3">üë• Bi·ªÉu ƒë·ªì Ng∆∞·ªùi d√πng m·ªõi</h5>
          <div class="chart-wrap"><canvas id="userChart"></canvas></div>
        </div>
      </div>
    </div>

  </div>
  <!-- /content -->

  <script>
    // Sidebar toggle
    document.getElementById('toggleBtn').addEventListener('click', () => {
      document.getElementById('sidebar').classList.toggle('collapsed');
    });

    // Charts instance
    let revenueChart, userChart, yearlyRevenueChart;

    // Formatters
    const VN_CCY = { style:'currency', currency:'VND' };
    const fmtVND = v => new Intl.NumberFormat('vi-VN', VN_CCY).format(v || 0);
    const fmtNum = v => new Intl.NumberFormat('vi-VN').format(v || 0);

    // Tr·∫£ v·ªÅ yyyy-mm-dd theo gi·ªù VN
    function isoDateOnlyVN(date) {
      return date.toLocaleDateString("sv-SE", { timeZone: "Asia/Ho_Chi_Minh" });
    }

    // ----- Filter helpers -----
    function setDateInputsByPreset(preset) {
      const today = new Date().toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" });
      const todayDate = new Date(today);
      let start = new Date(today), end = new Date(today);
      if (preset === 'today') {
        // gi·ªØ nguy√™n today
      } else if (preset === 'yesterday') {
        start.setDate(todayDate.getDate()-1);
        end.setDate(todayDate.getDate()-1);
      } else {
        const days = parseInt(preset,10) || 0;
        start.setDate(todayDate.getDate()-days);
      }
      document.getElementById('fromDate').value = isoDateOnlyVN(start);
      document.getElementById('toDate').value = isoDateOnlyVN(end);
      updateRangeLabel(start, end);
    }

    function updateRangeLabel(s, e) {
      const label = document.getElementById('dateRangeLabel');
      const sText = isoDateOnlyVN(new Date(s));
      const eText = isoDateOnlyVN(new Date(e));
      label.textContent = `T·ª´ ${sText} ƒë·∫øn ${eText}`;
    }

    async function fetchStatsISO(fromIso, toIso) {
      const res = await fetch(`/dashboard/stats?from=${encodeURIComponent(fromIso)}&to=${encodeURIComponent(toIso)}`);
      const data = await res.json();
      updateStatsUI(data);
    }

    function updateStatsUI(data) {
      document.getElementById('revenue').textContent = fmtVND(data.revenue);
      document.getElementById('order-count').textContent = data.orderCount ?? 0;
      document.getElementById('new-users-count').textContent = data.newCustomers ?? 0;

      renderBestSellers(data.bestSellers || []);
      renderRevenueChart(data.dailyRevenue || []);
      renderUserChart(data.dailyUsers || []);
      renderYearlyRevenueChart(data.yearlyRevenue || []);
    }

    function renderBestSellers(products) {
      const tbody = document.querySelector('#best-sellers tbody');
      if (!products.length) {
        tbody.innerHTML = `<tr><td colspan="3" class="text-center">Kh√¥ng c√≥ d·ªØ li·ªáu</td></tr>`;
        return;
      }
      tbody.innerHTML = products.map((p,i)=>`
        <tr>
          <td>${i+1}</td>
          <td>${p.name || 'Kh√¥ng t√™n'}</td>
          <td>${fmtVND(p.totalRevenue)}</td>
        </tr>
      `).join('');
    }

    
    function makeGradient(ctx, base='#4CAF50') {
      const g = ctx.createLinearGradient(0,0,0,ctx.canvas.height);
      g.addColorStop(0, base+'99');
      g.addColorStop(1, base+'10');
      return g;
    }

    function renderRevenueChart(d) {
      const ctx = document.getElementById('revenueChart').getContext('2d');
      if (revenueChart) revenueChart.destroy();
      revenueChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: d.map(i=>i.date),
          datasets: [{
            label: 'Doanh thu',
            data: d.map(i=>i.total),
            borderColor: '#4CAF50',
            backgroundColor: makeGradient(ctx,'#4CAF50'),
            borderWidth: 2,
            tension: .35,
            fill: true,
            pointRadius: 3,
            pointHoverRadius: 6,
            pointBackgroundColor: '#fff',
          }]
        },
        options: {
          responsive: true, maintainAspectRatio: true,
          interaction: { mode: 'index', intersect: false },
          scales: {
            x: { grid: { display: false }},
            y: { grid: { color: 'rgba(0,0,0,.06)' }, ticks: { callback: v=>fmtNum(v) } }
          },
          plugins: {
            legend: { labels: { boxWidth: 12 }},
            tooltip: { callbacks: { label: ctx=>` ${fmtVND(ctx.parsed.y)}` } }
          }
        }
      });
    }

    function renderUserChart(d) {
      const ctx = document.getElementById('userChart').getContext('2d');
      if (userChart) userChart.destroy();
      userChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: d.map(i=>i.date),
          datasets: [{
            label: 'Ng∆∞·ªùi d√πng m·ªõi',
            data: d.map(i=>i.count),
            backgroundColor: '#2196F3',
            borderRadius: 6,
            borderSkipped: false
          }]
        },
        options: {
          responsive: true, maintainAspectRatio: true,
          scales: {
            x: { grid: { display: false }},
            y: { grid: { color: 'rgba(0,0,0,.06)' }, ticks: { precision: 0 } }
          },
          plugins: {
            legend: { labels: { boxWidth: 12 }},
            tooltip: { callbacks: { label: ctx=>` ${fmtNum(ctx.parsed.y)} ng∆∞·ªùi` } }
          }
        }
      });
    }

    function renderYearlyRevenueChart(d) {
      const wrap = document.getElementById('yearly-wrap');
      if (!d || !d.length) { wrap.style.display='none'; return; }
      wrap.style.display='';
      const ctx = document.getElementById('yearlyRevenueChart').getContext('2d');
      if (yearlyRevenueChart) yearlyRevenueChart.destroy();
      const sorted = [...d].sort((a,b)=> (b.year||0)-(a.year||0));
      yearlyRevenueChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: sorted.map(i=>i.year),
          datasets: [{
            label: 'Doanh thu',
            data: sorted.map(i=>i.total),
            backgroundColor: '#57c5b6',
            borderColor: '#57c5b6',
            borderRadius: 6,
            borderSkipped: false
          }]
        },
        options: {
          indexAxis: 'y',
          responsive: true, maintainAspectRatio: true,
          scales: {
            x: { grid: { color: 'rgba(0,0,0,.06)' }, ticks: { callback: v=>fmtNum(v) } },
            y: { grid: { display: false } }
          },
          plugins: {
            legend: { display: false },
            tooltip: { callbacks: { label: ctx=>` ${fmtVND(ctx.parsed.x)}` } }
          }
        }
      });
    }

    // ----- Events -----
    document.getElementById('time-range').addEventListener('change', function() {
      setDateInputsByPreset(this.value);
      const from = new Date(document.getElementById('fromDate').value+'T00:00:00');
      const to = new Date(document.getElementById('toDate').value+'T23:59:59');
      fetchStatsISO(from.toISOString(), to.toISOString());
    });

    document.getElementById('applyBtn').addEventListener('click', () => {
      const fromInput = document.getElementById('fromDate').value;
      const toInput = document.getElementById('toDate').value;
      if (!fromInput || !toInput) return;
      const s = new Date(fromInput+'T00:00:00');
      const e = new Date(toInput+'T23:59:59');
      updateRangeLabel(s,e);
      fetchStatsISO(s.toISOString(), e.toISOString());
    });

    document.getElementById('resetBtn').addEventListener('click', () => {
      document.getElementById('time-range').value = 'today';
      setDateInputsByPreset('today');
      const today = isoDateOnlyVN(new Date());
      fetchStatsISO(new Date(today+'T00:00:00').toISOString(),
                    new Date(today+'T23:59:59').toISOString());
    });

    // Init l·∫ßn ƒë·∫ßu
    document.addEventListener('DOMContentLoaded', () => {
      if (defaultFrom && defaultTo) {
        const s = new Date(defaultFrom);
        const e = new Date(defaultTo);
        document.getElementById('fromDate').value = isoDateOnlyVN(s);
        document.getElementById('toDate').value = isoDateOnlyVN(e);
        document.getElementById('time-range').value = 'today';
        updateRangeLabel(s,e);
        fetchStatsISO(defaultFrom, defaultTo);
      } else {
        // m·∫∑c ƒë·ªãnh h√¥m nay
        document.getElementById('time-range').value = 'today';
        setDateInputsByPreset('today');
        const today = isoDateOnlyVN(new Date());
        fetchStatsISO(new Date(today+'T00:00:00').toISOString(),
                      new Date(today+'T23:59:59').toISOString());
      }
    });
  </script>
</body>
</html>