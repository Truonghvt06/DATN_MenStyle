<!DOCTYPE html>
<html lang="vi">

<head>
  <meta charset="UTF-8">
  <title>Th·ªëng k√™ - MenStyle</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      background-color: #f8f9fa;
      font-family: 'Segoe UI', sans-serif;
    }

    .box-card {
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
      background: #fff;
    }

    .box-title {
      font-size: 20px;
      font-weight: 600;
    }

    .value {
      font-size: 28px;
      font-weight: bold;
    }

    .small-label {
      font-size: 14px;
      color: #666;
    }

    .chart-card {
      padding: 20px;
      border-radius: 12px;
      background: #fff;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    }

    table th,
    table td {
      vertical-align: middle !important;
    }
  </style>
  <script>
    const defaultFrom = "<%= defaultFrom %>";
    const defaultTo = "<%= defaultTo %>";
  </script>
</head>

<body class="p-4">
  <div class="container-fluid">
    <h2 class="mb-4">üìä Th·ªëng k√™ h·ªá th·ªëng</h2>

    <div class="d-flex justify-content-end align-items-center mb-3">
      <div>
        <select id="time-range" class="form-select border-primary" style="width: 200px;">
          <option value="today">H√¥m nay</option>
          <option value="yesterday">H√¥m qua</option>
          <option value="7">1 tu·∫ßn qua</option>
          <option value="14">2 tu·∫ßn qua</option>
          <option value="60">2 th√°ng qua</option>
          <option value="180">6 th√°ng qua</option>
          <option value="365">1 nƒÉm qua</option>
        </select>
        <div class="small mt-1 text-muted" id="dateRangeLabel">Loading...</div>
      </div>
    </div>

    <div class="row g-4 mb-4">
      <div class="col-md-4">
        <div class="box-card text-dark">
          <div class="small-label">Doanh Thu</div>
          <div class="value text-success" id="revenue">‚Ç´0</div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="box-card text-dark">
          <div class="small-label">ƒê∆°n H√†ng</div>
          <div class="value" id="order-count">0</div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="box-card text-dark">
          <div class="small-label">Kh√°ch H√†ng M·ªõi</div>
          <div class="value" id="new-users-count">0</div>
        </div>
      </div>
    </div>

    <div class="row g-4 mb-4">
      <div class="col-md-12">
        <div class="chart-card">
          <h5 class="mb-3">üî• S·∫£n Ph·∫©m B√°n Ch·∫°y</h5>
          <table class="table table-bordered" id="best-sellers">
            <thead>
              <tr>
                <th>#</th>
                <th>S·∫£n Ph·∫©m</th>
                <th>Doanh Thu</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td colspan="3" class="text-center">Loading...</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <div class="row g-4">
      <div class="col-md-6">
        <div class="chart-card">
          <h5 class="mb-3">üìà Bi·ªÉu ƒë·ªì Doanh thu</h5>
          <canvas id="revenueChart" height="250"></canvas>
        </div>
      </div>
      <div class="col-md-6">
        <div class="chart-card">
          <h5 class="mb-3">üë• Bi·ªÉu ƒë·ªì Ng∆∞·ªùi d√πng m·ªõi</h5>
          <canvas id="userChart" height="250"></canvas>
        </div>
      </div>
    </div>
  </div>

  <script>
    let revenueChart, userChart;

    function formatDate(date) {
      return date.toISOString().split('T')[0];
    }

    function updateDateRangeLabel(value) {
      const today = new Date();
      let start = new Date();
      let end = new Date();

      if (value === 'today') {
        start.setHours(0, 0, 0, 0);
        end.setHours(23, 59, 59, 999);
      } else if (value === 'yesterday') {
        start.setDate(today.getDate() - 1);
        end.setDate(today.getDate() - 1);
        start.setHours(0, 0, 0, 0);
        end.setHours(23, 59, 59, 999);
      } else {
        const days = parseInt(value);
        start.setDate(today.getDate() - days);
        start.setHours(0, 0, 0, 0);
        end.setHours(23, 59, 59, 999);
      }

      document.getElementById('dateRangeLabel').innerText =
        `T·ª´ ${formatDate(start)} ƒë·∫øn ${formatDate(end)}`;
    }

    async function fetchStats(from, to) {
      const url = `/dashboard/stats?from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}`;
      const res = await fetch(url);
      const data = await res.json();
      updateStatsUI(data);
    }

    function updateStatsUI(data) {
      document.getElementById('revenue').innerText = formatCurrency(data.revenue);
      document.getElementById('order-count').innerText = data.orderCount;
      document.getElementById('new-users-count').innerText = data.newCustomers;

      renderBestSellers(data.bestSellers);
      renderRevenueChart(data.dailyRevenue);
      renderUserChart(data.dailyUsers);
    }

    function renderBestSellers(products) {
      const tbody = document.querySelector('#best-sellers tbody');
      if (!products.length) {
        tbody.innerHTML = `<tr><td colspan="3" class="text-center">Kh√¥ng c√≥ d·ªØ li·ªáu</td></tr>`;
        return;
      }

      tbody.innerHTML = '';
      products.forEach((item, index) => {
        tbody.innerHTML += `
          <tr>
            <td>${index + 1}</td>
            <td>${item.name || 'Kh√¥ng t√™n'}</td>
            <td>${formatCurrency(item.totalRevenue)}</td>
          </tr>`;
      });
    }

    function renderRevenueChart(data) {
      const ctx = document.getElementById('revenueChart').getContext('2d');
      if (revenueChart) revenueChart.destroy();
      revenueChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: data.map(i => i.date),
          datasets: [{
            label: 'Doanh thu',
            data: data.map(i => i.total),
            borderWidth: 2,
            borderColor: '#4CAF50',
            fill: false
          }]
        }
      });
    }

    function renderUserChart(data) {
      const ctx = document.getElementById('userChart').getContext('2d');
      if (userChart) userChart.destroy();
      userChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: data.map(i => i.date),
          datasets: [{
            label: 'Ng∆∞·ªùi d√πng m·ªõi',
            data: data.map(i => i.count),
            backgroundColor: '#2196F3'
          }]
        }
      });
    }

    function formatCurrency(value) {
      return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
      }).format(value || 0);
    }

    document.getElementById('time-range').addEventListener('change', function () {
      const range = this.value;
      updateDateRangeLabel(range);

      const today = new Date();
      let start = new Date();
      let end = new Date();

      if (range === 'today') {
        start.setHours(0, 0, 0, 0);
        end.setHours(23, 59, 59, 999);
      } else if (range === 'yesterday') {
        start.setDate(today.getDate() - 1);
        end.setDate(today.getDate() - 1);
        start.setHours(0, 0, 0, 0);
        end.setHours(23, 59, 59, 999);
      } else {
        const days = parseInt(range);
        start.setDate(today.getDate() - days);
        start.setHours(0, 0, 0, 0);
        end.setHours(23, 59, 59, 999);
      }

      fetchStats(start.toISOString(), end.toISOString());
    });

    document.addEventListener("DOMContentLoaded", () => {
      if (defaultFrom && defaultTo) {
        fetchStats(defaultFrom, defaultTo);
        document.getElementById('time-range').value = "today";
        updateDateRangeLabel("today");
      }
    });
  </script>

</body>

</html>
