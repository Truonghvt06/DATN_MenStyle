<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <title>Thống kê - MenStyle</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #f8f9fa;
      margin: 0;
      padding: 0;
      display: flex;
    }
    .sidebar {
      width: 240px;
      min-height: 100vh;
      background: #fff;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
      padding: 20px 0;
      transition: all 0.3s ease;
    }
    .sidebar.collapsed { width: 60px; }
    .sidebar a {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px 20px;
      color: #333;
      text-decoration: none;
      font-weight: 500;
      transition: 0.3s;
      white-space: nowrap;
    }
    .sidebar a:hover { background: #111; color: #fff; }
    .sidebar.collapsed a span { display: none; }
    .sidebar a i { font-size: 20px; }
    .content { flex: 1; padding: 30px; }
    header {
      background-color: #111;
      color: #fff;
      padding: 15px 20px;
      font-size: 24px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 15px;
      margin-bottom: 30px;
    }
    .value { font-size:28px; font-weight:700; }
    .small-label { font-size:14px; color:#666; }
    .chart-card { padding:20px; border-radius:12px; background:#fff; box-shadow:0 2px 6px rgba(0,0,0,.05); }
    table th, table td { vertical-align:middle !important; }
    .box-card { padding:20px; border-radius:12px; box-shadow:0 2px 6px rgba(0,0,0,.05); background:#fff; }
    /* KHỐI CỐ ĐỊNH CHIỀU CAO BIỂU ĐỒ (không bị chảy layout) */
    .chart-wrap { position:relative; height:260px; }
    .chart-wrap--yearly { position:relative; height:320px; }
    .chart-wrap > canvas,
    .chart-wrap--yearly > canvas {
      display:block !important;
      width:100% !important;
      height:100% !important;
    }
  </style>
</head>
<script>
  const defaultFrom = "<%= defaultFrom %>";
  const defaultTo   = "<%= defaultTo %>";
</script>
<body>
  <!-- Sidebar -->
  <nav class="sidebar" id="sidebar">
    <a href="/"><i class="bi bi-house"></i><span>Trang chủ</span></a>
    <a href="/products/view"><i class="bi bi-box"></i><span> Sản phẩm</span></a>
    <a href="/voucher/view"><i class="bi bi-ticket"></i><span> Phiếu giảm giá</span></a>
    <a href="/accounts/view"><i class="bi bi-people"></i><span> Tài khoản</span></a>
    <a href="/accounts/admin/orders"><i class="bi bi-receipt-cutoff"></i><span> Đơn hàng</span></a>
    <a href="/dashboard/stats-overview" class="bg-light"><i class="bi bi-bar-chart-line"></i><span> Thống kê</span></a>
    <a href="/setting/view"><i class="bi bi-gear"></i> <span>Cài đặt</span></a>
  </nav>

  <!-- Content -->
  <div class="content" id="content">
    <header>
      <button id="toggleBtn" class="btn btn-dark"><i class="bi bi-list"></i></button>
      MenStyle - Thống kê
    </header>

    <!-- Bộ lọc -->
    <div class="d-flex justify-content-end align-items-center mb-3">
      <div>
        <select id="time-range" class="form-select border-primary" style="width:200px;">
          <option value="today">Hôm nay</option>
          <option value="yesterday">Hôm qua</option>
          <option value="7">1 tuần qua</option>
          <option value="14">2 tuần qua</option>
          <option value="60">2 tháng qua</option>
          <option value="180">6 tháng qua</option>
          <option value="365">1 năm qua</option>
        </select>
        <div class="small mt-1 text-muted" id="dateRangeLabel">Loading...</div>
      </div>
    </div>

    <div class="row g-4 mb-4">
      <div class="col-md-4">
        <div class="box-card text-dark">
          <div class="small-label">Doanh Thu</div>
          <div class="value text-success" id="revenue">₫0</div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="box-card text-dark">
          <div class="small-label">Đơn Hàng</div>
          <div class="value" id="order-count">0</div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="box-card text-dark">
          <div class="small-label">Khách Hàng Mới</div>
          <div class="value" id="new-users-count">0</div>
        </div>
      </div>
    </div>

    <!-- Best sellers -->
    <div class="row g-4 mb-4">
      <div class="col-12">
        <div class="chart-card">
          <h5 class="mb-3">🔥 Sản Phẩm Bán Chạy</h5>
          <table class="table table-bordered" id="best-sellers">
            <thead>
              <tr><th>#</th><th>Sản Phẩm</th><th>Doanh Thu</th></tr>
            </thead>
            <tbody>
              <tr><td colspan="3" class="text-center">Loading...</td></tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- 2 biểu đồ ngày -->
    <div class="row g-4">
      <div class="col-md-6">
        <div class="chart-card">
          <h5 class="mb-3">📈 Biểu đồ Doanh thu</h5>
          <div class="chart-wrap"><canvas id="revenueChart"></canvas></div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="chart-card">
          <h5 class="mb-3">👥 Biểu đồ Người dùng mới</h5>
          <div class="chart-wrap"><canvas id="userChart"></canvas></div>
        </div>
      </div>
    </div>

    <!-- Biểu đồ năm -->
    <div class="row g-4 mt-4" id="yearly-wrap" style="display:none;">
      <div class="col-12">
        <div class="chart-card">
          <h5 class="mb-3">📊 Doanh thu theo năm</h5>
          <div class="chart-wrap--yearly"><canvas id="yearlyRevenueChart"></canvas></div>
        </div>
      </div>
    </div>
  </div>
  </div>

  <script>
    const toggleBtn = document.getElementById('toggleBtn');
    const sidebar = document.getElementById('sidebar');
    toggleBtn.addEventListener('click', () => {
      sidebar.classList.toggle('collapsed');
    });
    let revenueChart, userChart, yearlyRevenueChart;

    const VN_FORMAT = { style:'currency', currency:'VND' };
    const fmtVND = v => new Intl.NumberFormat('vi-VN', VN_FORMAT).format(v || 0);
    const fmtNum  = v => new Intl.NumberFormat('vi-VN').format(v || 0);

    function formatDate(d){ return d.toISOString().split('T')[0]; }

    function updateDateRangeLabel(value){
      const today = new Date();
      let start = new Date(), end = new Date();

      if(value==='today'){
        start.setHours(0,0,0,0); end.setHours(23,59,59,999);
      }else if(value==='yesterday'){
        start.setDate(today.getDate()-1);
        end.setDate(today.getDate()-1);
        start.setHours(0,0,0,0); end.setHours(23,59,59,999);
      }else{
        const days = parseInt(value,10);
        start.setDate(today.getDate()-days);
        start.setHours(0,0,0,0); end.setHours(23,59,59,999);
      }
      document.getElementById('dateRangeLabel').innerText =
        `Từ ${formatDate(start)} đến ${formatDate(end)}`;
    }

    async function fetchStats(from, to){
      const res = await fetch(`/dashboard/stats?from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}`);
      const data = await res.json();
      updateStatsUI(data);
    }

    function updateStatsUI(data){
      document.getElementById('revenue').innerText = fmtVND(data.revenue);
      document.getElementById('order-count').innerText = data.orderCount ?? 0;
      document.getElementById('new-users-count').innerText = data.newCustomers ?? 0;

      renderBestSellers(data.bestSellers || []);
      renderRevenueChart(data.dailyRevenue || []);
      renderUserChart(data.dailyUsers || []);
      renderYearlyRevenueChart(data.yearlyRevenue || []);
    }

    function renderBestSellers(products){
      const tbody = document.querySelector('#best-sellers tbody');
      if(!products.length){
        tbody.innerHTML = `<tr><td colspan="3" class="text-center">Không có dữ liệu</td></tr>`;
        return;
      }
      tbody.innerHTML = products.map((p,i)=>`
        <tr>
          <td>${i+1}</td>
          <td>${p.name || 'Không tên'}</td>
          <td>${fmtVND(p.totalRevenue)}</td>
        </tr>`).join('');
    }

    // tạo gradient mượt cho line/area
    function makeGradient(ctx, color='#4CAF50'){
      const {height} = ctx.canvas;
      const g = ctx.createLinearGradient(0,0,0,height);
      g.addColorStop(0, color + '99');   // 60% opacity
      g.addColorStop(1, color + '10');   // 6% opacity
      return g;
    }

    function renderRevenueChart(d){
      const ctx = document.getElementById('revenueChart').getContext('2d');
      if(revenueChart) revenueChart.destroy();

      const labels = d.map(i=>i.date);
      const values = d.map(i=>i.total);
      const lineColor = '#4CAF50';

      revenueChart = new Chart(ctx,{
        type:'line',
        data:{
          labels,
          datasets:[{
            label:'Doanh thu',
            data: values,
            borderColor: lineColor,
            backgroundColor: makeGradient(ctx, '#4CAF50'),
            fill: true,                            // phủ gradient dưới đường
            tension: 0.35,                         // sóng mượt
            cubicInterpolationMode: 'monotone',    // mượt hơn
            pointRadius: 3,
            pointHoverRadius: 6,
            pointBorderColor: lineColor,
            pointBackgroundColor:'#fff',
            borderWidth:2,
          }]
        },
        options:{
          responsive:true,
          maintainAspectRatio:true,
          interaction:{ mode:'index', intersect:false },
          scales:{
            x:{ grid:{ display:false } },
            y:{
              ticks:{ callback:v=>fmtNum(v) },
              grid:{ color:'rgba(0,0,0,.06)' }
            }
          },
          plugins:{
            legend:{ labels:{ boxWidth:12 } },
            tooltip:{
              callbacks:{ label:ctx=>` ${fmtVND(ctx.parsed.y)}` }
            }
          }
        }
      });
    }

    function renderUserChart(d){
      const ctx = document.getElementById('userChart').getContext('2d');
      if(userChart) userChart.destroy();

      const labels = d.map(i=>i.date);
      const values = d.map(i=>i.count);

      userChart = new Chart(ctx,{
        type:'bar',
        data:{
          labels,
          datasets:[{
            label:'Người dùng mới',
            data: values,
            backgroundColor:'#2196F3',
            borderRadius:6,
            borderSkipped:false
          }]
        },
        options:{
          responsive:true,
          maintainAspectRatio:true,
          scales:{
            x:{ grid:{ display:false } },
            y:{ grid:{ color:'rgba(0,0,0,.06)' }, ticks:{ precision:0 } }
          },
          plugins:{
            legend:{ labels:{ boxWidth:12 } },
            tooltip:{ callbacks:{ label:ctx=>` ${fmtNum(ctx.parsed.y)} người` } }
          }
        }
      });
    }

    function renderYearlyRevenueChart(d){
      const wrap = document.getElementById('yearly-wrap');
      if(!d || !d.length){ wrap.style.display='none'; return; }
      wrap.style.display='';

      const ctx = document.getElementById('yearlyRevenueChart').getContext('2d');
      if(yearlyRevenueChart) yearlyRevenueChart.destroy();

      // sort giảm dần theo năm
      const dataSorted = [...d].sort((a,b)=> (b.year||0)-(a.year||0));
      const labels = dataSorted.map(i=>i.year);
      const values = dataSorted.map(i=>i.total);

      yearlyRevenueChart = new Chart(ctx,{
        type:'bar',
        data:{
          labels,
          datasets:[{
            label:'Doanh thu',
            data: values,
            backgroundColor:'#57c5b6',
            borderColor:'#57c5b6',
            borderWidth:1,
            borderRadius: 6,
            borderSkipped:false
          }]
        },
        options:{
          indexAxis:'y',             // thanh ngang
          responsive:true,
          maintainAspectRatio:true,
          scales:{
            x:{
              ticks:{ callback:v=>fmtNum(v) },
              grid:{ color:'rgba(0,0,0,.06)' }
            },
            y:{ grid:{ display:false } }
          },
          plugins:{
            legend:{ display:false },
            tooltip:{ callbacks:{ label:ctx=>` ${fmtVND(ctx.parsed.x)}` } }
          }
        }
      });
    }

    // Lắng nghe đổi khoảng thời gian
    document.getElementById('time-range').addEventListener('change', function(){
      const today = new Date();
      let start = new Date(), end = new Date();

      if(this.value==='today'){
        start.setHours(0,0,0,0); end.setHours(23,59,59,999);
      }else if(this.value==='yesterday'){
        start.setDate(today.getDate()-1);
        end.setDate(today.getDate()-1);
        start.setHours(0,0,0,0); end.setHours(23,59,59,999);
      }else{
        const days = parseInt(this.value,10);
        start.setDate(today.getDate()-days);
        start.setHours(0,0,0,0); end.setHours(23,59,59,999);
      }

      updateDateRangeLabel(this.value);
      fetchStats(start.toISOString(), end.toISOString());
    });

    // Khởi tạo
    document.addEventListener('DOMContentLoaded', ()=>{
      if(defaultFrom && defaultTo){
        document.getElementById('time-range').value = 'today';
        updateDateRangeLabel('today');
        fetchStats(defaultFrom, defaultTo);
      }
    });
  </script>
</body>
</html>
