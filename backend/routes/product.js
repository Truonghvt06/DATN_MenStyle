const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Product = require('../models/Product');

// API l·∫•y danh s√°ch s·∫£n ph·∫©m JSON
router.get('/', async (req, res) => {
  try {
    const products = await Product.find().lean();
    if (products.length > 0) {
      console.log('First product:', products[0]);
    } else {
      console.log('No products found');
    }
    res.json(products);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y s·∫£n ph·∫©m', error: error.message });
  }
});

// Giao di·ªán danh s√°ch s·∫£n ph·∫©m
router.get('/view', async (req, res) => {
  try {
    const products = await Product.find();
    res.render('products', { products });
  } catch (error) {
    console.error('Error fetching products for view:', error);
    res.status(500).send('L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m');
  }
});

// Form th√™m s·∫£n ph·∫©m
router.get('/add', (req, res) => {
  res.render('product_add');
});

router.post('/add', async (req, res) => {
  try {
    const { name, type, description, price, variants } = req.body;

    if (!name || !type || !description || !price || !variants || !Array.isArray(variants)) {
      return res.status(400).send('Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc ho·∫∑c variants kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
    }

    const productPrice = Number(price);
    if (isNaN(productPrice)) {
      return res.status(400).send('Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë');
    }

    // Ki·ªÉm tra t·ª´ng bi·∫øn th·ªÉ
    for (const v of variants) {
      if (!v.size || !v.color || !v.quantity) {
        return res.status(400).send('Thi·∫øu tr∆∞·ªùng trong bi·∫øn th·ªÉ');
      }
      v.quantity = Number(v.quantity);
      if (isNaN(v.quantity)) {
        return res.status(400).send('S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë');
      }
    }

    // üëá Th√™m c√°c tr∆∞·ªùng m·∫∑c ƒë·ªãnh v√†o ƒë√¢y
    const product = new Product({
      name,
      type,
      description,
      price: productPrice,
      variants,
      rating_avg: 0,
      rating_count: 0,
      sold_count: 0
    });

    await product.save();
    console.log('Product added:', product._id);
    res.redirect('/products/view');
  } catch (error) {
    console.error('Error adding product:', error);
    res.status(500).send('L·ªói server khi th√™m s·∫£n ph·∫©m');
  }
});


// Form ch·ªânh s·ª≠a s·∫£n ph·∫©m
router.get('/edit/:id', async (req, res) => {
  try {
    if (!mongoose.isValidObjectId(req.params.id)) {
      console.log('Invalid ObjectId:', req.params.id);
      return res.status(400).send('ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
    }
    const product = await Product.findById(req.params.id);
    if (!product) {
      console.log('Product not found for ID:', req.params.id);
      return res.status(404).send('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');
    }
    res.render('product_edit', { product });
  } catch (error) {
    console.error('Error fetching product for edit:', error);
    res.status(500).send('L·ªói server khi l·∫•y s·∫£n ph·∫©m ƒë·ªÉ ch·ªânh s·ª≠a');
  }
});

router.post('/edit/:id', async (req, res) => {
  try {
    if (!mongoose.isValidObjectId(req.params.id)) {
      return res.status(400).send('ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
    }
    const { name, type, description, price, variants } = req.body;
    if (!name || !type || !description || !price || !variants || !Array.isArray(variants)) {
      return res.status(400).send('Thi·∫øu th√¥ng tin ho·∫∑c variants kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
    }

    const productPrice = Number(price);
    if (isNaN(productPrice)) {
      return res.status(400).send('Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë');
    }

    for (const v of variants) {
      if (!v.size || !v.color || !v.quantity) {
        return res.status(400).send('Thi·∫øu tr∆∞·ªùng trong bi·∫øn th·ªÉ');
      }
      v.quantity = Number(v.quantity);
      if (isNaN(v.quantity)) {
        return res.status(400).send('S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë');
      }
    }

    await Product.findByIdAndUpdate(req.params.id, { name, type, description, price: productPrice, variants });
    console.log('Product updated:', req.params.id);
    res.redirect('/products/view');
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).send('L·ªói server khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m');
  }
});

// X√≥a s·∫£n ph·∫©m
router.get('/delete/:id', async (req, res) => {
  try {
    if (!mongoose.isValidObjectId(req.params.id)) {
      return res.status(400).send('ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
    }
    const product = await Product.findByIdAndDelete(req.params.id);
    if (!product) {
      return res.status(404).send('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a');
    }
    console.log('Product deleted:', req.params.id);
    res.redirect('/products/view');
  } catch (error) {
    console.error('Error deleting product:', error);
    res.status(500).send('L·ªói khi x√≥a s·∫£n ph·∫©m');
  }
});

// Chi ti·∫øt s·∫£n ph·∫©m
router.get('/:id', async (req, res) => {
  try {
    if (!mongoose.isValidObjectId(req.params.id)) {
      console.log('Invalid ObjectId:', req.params.id);
      return res.status(400).send('ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
    }
    const product = await Product.findById(req.params.id).lean();
    if (!product) {
      console.log('Product not found for ID:', req.params.id);
      return res.status(404).send('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');
    }
    console.log('Product found:', product);
    res.render('product_detail', { product });
  } catch (error) {
    console.error('Error fetching product details:', error);
    res.status(500).send('L·ªói server khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m');
  }
});

module.exports = router;